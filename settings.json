{
   /*
      This is my selections using Visual Studio Code
      as a primary editor for Powershell scripts.
      My Visual Studio Code General Settings.
   */

   // I prefer my sidebar to the right. My code doesn't move
   "workbench.sideBar.location": "right",
   // Controls the location of the Activity Bar relative to the Primary and Secondary Side Bars.
   //  - default: Show the Activity Bar on the side of the Primary Side Bar and on top of the Secondary Side Bar.
   //  - top: Show the Activity Bar on top of the Primary and Secondary Side Bars.
   //  - bottom: Show the Activity Bar at the bottom of the Primary and Secondary Side Bars.
   //  - hidden: Hide the Activity Bar in the Primary and Secondary Side Bars.
   "workbench.activityBar.location": "top",
   // My preference for me and my profiles.
   "workbench.settings.applyToAllProfiles": [
        "workbench.sideBar.location"
    ],
   // The gutter view is not for me. It's a waste of space.
   "editor.minimap.enabled": false,
   "workbench.iconTheme": "vscode-icons",
   //Save files after 10 seconds of no typing. Since I use Git a lot I'm not worried about accidentally overwriting stuff
   "files.autoSave": "afterDelay",
   "files.autoSaveDelay": 10000,
   // Always remember unsaved files, I'll explicitly close them if I don't want them
   "files.hotExit": "onExitAndWindowClose",
   // Controls how lines should wrap.
   "editor.wordWrap": "on",
   // Controls the indentation of wrapped lines.
   //  - none: No indentation. Wrapped lines begin at column 1.
   //  - same: Wrapped lines get the same indentation as the parent.
   //  - indent: Wrapped lines get +1 indentation toward the parent.
   //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
   "editor.wrappingIndent": "same",
    /*
       Controls whether the editor should automatically adjust the indentation when users type,
         paste, move or indent lines.
      - none: The editor will not insert indentation automatically.
      - keep: The editor will keep the current line's indentation.
      - brackets: The editor will keep the current line's indentation and honor language defined brackets.
      - advanced: The editor will keep the current line's indentation, honor language defined brackets and
         invoke special onEnterRules defined by languages.
      - full: The editor will keep the current line's indentation, honor language defined brackets,
         invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
    */
    "editor.autoIndent": "full",
    // Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
    "[powershell]": {
		"editor.defaultFormatter": "ms-vscode.powershell"
	},
    "editor.renderWhitespace": "all",
    "editor.renderControlCharacters": true,
    "files.trimTrailingWhitespace": true,
    "files.encoding": "utf8bom",
    "files.autoGuessEncoding": true,
    //I use insiders and don't want to break stuff mid-work
    "update.enableWindowsBackgroundUpdates": false,
    //Follow the OS theme default. I prefer dark theme
    "window.autoDetectColorScheme": false,
   // Render vertical rulers after a certain number of monospace characters. Company standard file width
   "editor.rulers": [
        120
   ],
   // Zoom the font of the editor when using mouse wheel and holding `Ctrl`. I notice this option at work on Excede.
   "editor.mouseWheelZoom": true,
   // When enabled, the notifications for extension recommendations will not be shown.
   "extensions.ignoreRecommendations": true,
   // Enable that the selection with the mouse and keys is doing column selection.
   "editor.columnSelection": false,
   // Nice and clean when VS Code starts up.
   "workbench.startupEditor": "newUntitledFile",
   "window.newWindowDimensions": "maximized",
   //Hammers my system if I left a bunch of stuff open before. I'll open what i want
   "window.restoreWindows": "none",
   //I want Powershell Intellisense first
   "editor.snippetSuggestions": "bottom",
   // Controls whether an active snippet prevents quick suggestions.
   "editor.suggest.snippetsPreventQuickSuggestions": false,
   //Easier for me to distinguish between multiple windows
   "window.title": "${dirty}${remoteName}${separator}${rootName}${separator}${activeEditorShort}${separator}${appName}",
   "window.titleSeparator": " | ",
   // CaskaydiaCove NF is Cascadia Code with fancy Nerd Font symbols and ligatures
   "editor.fontFamily": "CaskaydiaCove NF, Cascadia Code, Consolas NF, Inconsolata NF, Consolas, Courier New, monospace",
   "debug.console.fontFamily": "CaskaydiaCove NF, Consolas NF, Inconsolata NF, Consolas, Courier New, monospace",
   // Configures font ligatures or font features.
   "editor.fontLigatures": true,
   // Controls the font size in pixels.
   "editor.fontSize": 16,
   "editor.wordBasedSuggestions": "currentDocument",
   // Characters that will be used as word separators when doing word related navigations or operations.
   "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
   "editor.accessibilitySupport": "off",
   "editor.autoClosingQuotes": "languageDefined",
   "editor.bracketPairColorization.enabled": true,
   "editor.bracketPairColorization.independentColorPoolPerBracketType": true,
   "editor.cursorBlinking": "phase",
   "editor.detectIndentation": true,
   "editor.foldingImportsByDefault": true,
   // Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
   "editor.fontWeight": "300",
   // Controls whether the editor should automatically format the pasted content.
   "editor.formatOnPaste": true,
   // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
   "editor.formatOnSave": true,
   // Controls whether the editor should automatically format the line after typing.
   "editor.formatOnType": true,
   // Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
   //  - file: Format the whole file.
   //  - modifications: Format modifications (requires source control).
   //  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
   "editor.formatOnSaveMode": "modifications",
   "editor.guides.highlightActiveBracketPair": true,
   "editor.guides.bracketPairs": "active",
   "editor.guides.bracketPairsHorizontal": true,
   "editor.guides.highlightActiveIndentation": true,
   "editor.guides.indentation": true,
   "editor.inlayHints.enabled": "offUnlessPressed",
   "editor.inlayHints.fontSize": 12,
   "editor.inlineSuggest.enabled": true,
   "editor.lineHeight": 1.2,
   "editor.insertSpaces": false,
   "editor.quickSuggestions": {
    "comments": "on",
    "other": "on",
    "strings": "on"
  },
   "editor.renderLineHighlight": "none",
   "editor.semanticTokenColorCustomizations": {
   "[Default Dark+]": {
      "enabled": true,
      "rules": {
         "punctuation.section.bracket.end.powershell": "#569CD6"
      }
   }
},
   "editor.showFoldingControls": "always",
   "editor.stickyTabStops": true,
   "editor.suggest.localityBonus": true,
   "editor.suggest.preview": true,
   "editor.suggest.showStatusBar": true,
   "editor.suggestSelection": "recentlyUsedByPrefix",
   "editor.tabSize": 2,
   "editor.tokenColorCustomizations": {
      "[Default Dark+ Experimental]": {
       "textMateRules": [
         {
            "scope": [
               "meta.attribute.powershell"
            ],
            "settings": {
               "foreground": "#9CDCFE"
            }
         },
         {
            "scope": [
               "variable.other.member"
            ],
            "settings": {
               "foreground": "#DCDCAA"
            }
         },
         {
            "scope": [
               "support.function.attribute.powershell",
               "storage.type.powershell",
               "variable.parameter.powershell"
            ],
            "settings": {
               "foreground": "#4ec9b0ff"
            }
         },
         {
            "scope": [
               "meta.hashtable.assignment.powershell"
            ],
            "settings": {
               "foreground": "#D4D4D4"
            }
         },
         {
            "scope": [
               "support.constant.variable.powershell",
               "support.constant.automatic.powershell",
               "keyword.control.using.powershell"
            ],
            "settings": {
               "foreground": "#569cd6"
            }
         },
         {
            "scope": [
               "punctuation.section.bracket.begin.powershell",
               "punctuation.section.bracket.end.powershell"
            ],
            "settings": {
               "foreground": "#569CD6"
            }
         }
      ]
   }
},
   "editor.useTabStops": true,
   "editor.wordWrapColumn": 120,
   "errorLens.enabled": true,
   "errorLens.enabledDiagnosticLevels": [
      "warning", "info", "error"
],
   "errorLens.gutterIconSet": "borderless",
   "explorer.copyRelativePathSeparator": "/",
   "explorer.fileNesting.enabled": true,
   "explorer.fileNesting.patterns": {
      "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
      "*.jsx": "${capture}.js",
      "*.ps1": "${capture}.tests.ps1",
      "*.psm1": "${capture}.tests.ps1, ${capture}.psd1",
      "*.ts": "${basename}.spec.${extname}, ${capture}.js, ${basename}.test.${extname}",
      "*.tsx": "${capture}.ts",
      "package.json": "package-lock.json, .npmrc, yarn.lock, .yarnrc, pnpm-lock.yaml",
      "tsconfig.json": "tsconfig.*.json"
   },
   "files.associations": {
      ".denoflare": "jsonc",
      "*.json": "jsonc"
   },

   /*
      Powershell Settings
   */

   "window.zoomLevel": 0,
   //Powershell is the default with "new Item"
   "files.defaultLanguage": "powershell",
   "powershell.startAutomatically": true,
   "powershell.scriptAnalysis.enable": true,
   "powershell.scriptAnalysis.settingsPath": "PSScriptAnalyzerSettings.psd1",
   "powershell.enableProfileLoading":false,
   "editor.language.brackets": [
         ["{", "}"],
         ["(", ")"],
         ["#region", "#endregion"]
   ],
   "powershell.powerShellAdditionalExePaths": {
        "PS7": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
        "PS5.1": "C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
    },
   "peacock.showColorInStatusBar": false,
   "powershell.powerShellDefaultVersion": "PS7",
   "powershell.codeFormatting.preset": "Stroustrup",
   "powershell.buttons.showRunButtons": false,
   "powershell.codeFormatting.alignPropertyValuePairs": true,
   "powershell.codeFormatting.autoCorrectAliases": true,
   "powershell.codeFormatting.newLineAfterOpenBrace": true,
   "powershell.codeFormatting.openBraceOnSameLine": true,
   "powershell.codeFormatting.pipelineIndentationStyle": "IncreaseIndentationForFirstPipeline",
   "powershell.codeFormatting.trimWhitespaceAroundPipe": true,
   "powershell.codeFormatting.useConstantStrings": true,
   "powershell.codeFormatting.useCorrectCasing": true,
   "powershell.codeFormatting.whitespaceBetweenParameters": true,
   "powershell.integratedConsole.showOnStartup": true,
   "powershell.integratedConsole.focusConsoleOnExecute": true,
   "powershell.integratedConsole.suppressStartupBanner": true,
   "powershell.pester.codeLens": true,
   "powershell.pester.debugOutputVerbosity": "Detailed",
   "powershell.pester.useLegacyCodeLens": false,
   "powershell.promptToUpdatePowerShell": false,
   "powershell.sideBar.CommandExplorerVisibility": false,
   "powershell.startAsLoginShell.linux": true,
   "prettier.requireConfig": true,
   "screencastMode.onlyKeyboardShortcuts": true,
   "security.workspace.trust.banner": "never",
   "security.workspace.trust.enabled": false,
   "security.workspace.trust.startupPrompt": "never",
   "security.workspace.trust.untrustedFiles": "open",
   "settingsSync.ignoredExtensions": [],
   "settingsSync.ignoredSettings": [
      "extensions.autoCheckUpdates",
      "powershell.powerShellDefaultVersion",
      // This is deprecated, use `#terminal.integrated.defaultProfile.windows#` instead
      //"terminal.integrated.shell.windows"
      "terminal.integrated.defaultProfile.windows"
   ],

   /*
      Terminal Settings
   */

   "terminal.integrated.profiles.windows": {
      "PowerShell": {
         "source": "PowerShell",
         "icon": "terminal-powershell",
         "args": [
            "-NoLogo"
         ]
      },
      "Command Prompt": {
         "path": [
            "${env:windir}\\System32\\cmd.exe"
         ],
         "args": [],
         "icon": "terminal-cmd"
      },
      "Git Bash": {
         "path": [
            "C:\\Program Files\\Git\\bin\\Bash.exe"
         ],
         "icon": "terminal-bash"
      }
   },
   "terminal.integrated.defaultProfile.windows": "Git Bash",
   // Enables experimgit add .ental terminal Intellisense suggestions for supported shells (PowerShell) when `terminal.integrated.shellIntegration.enabled` is set to `true`.
   //
   // If shell integration is installed manually, `VSCODE_SUGGEST` needs to be set to `1` before calling the shell integration script.
   "terminal.integrated.suggest.enabled": true,

    /*
      Git and GitHub Settings
   */

   "git.openRepositoryInParentFolders": "always",
   "git-graph.repository.commits.fetchAvatars": true,
   "git-graph.repository.fetchAndPrune": true,
   "git.autofetch": true,
   "git.autoStash": true,
   "git.branchPrefix": "feature/",
   "git.branchRandomName.enable": true,
   "git.confirmEmptyCommits": false,
   "git.confirmSync": false,
   "git.enableSmartCommit": true,
   "git.ignoreMissingGitWarning": true,
   "git.inputValidationSubjectLength": 72,
   "git.openAfterClone": "whenNoFolderOpen",
   "git.postCommitCommand": "push",
   "git.promptToSaveFilesBeforeCommit": "staged",
   "git.pruneOnFetch": true,
   "git.rebaseWhenSync": true,
   "git.useCommitInputAsStashMessage": true,
   "github-actions.org-features": true,
   "github-actions.workflows.pinned.refresh.enabled": true,
   "github-actions.workflows.pinned.refresh.interval": 2,
   "github.copilot.enable": {
      "*": true,
      "yaml": true,
      "plaintext": false,
      "markdown": false,
      "scminput": false,
      "hcl": false
   },
   "githubIssues.queries": [
      {
         "label": "My Issues",
         "query": "default"
      },
      {
         "label": "My Created Issues",
         "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
      },
      {
         "label": "All Open",
         "query": "state:open repo:${owner}/${repository} sort:created-desc"
      }
   ],
   "githubPullRequests.createOnPublishBranch": "never",
   "githubPullRequests.defaultMergeMethod": "squash",
   "githubPullRequests.pushBranch": "always",
   "githubPullRequests.assignCreated": "${user}",
   "githubPullRequests.defaultDeletionMethod.selectLocalBranch": true,
   "githubPullRequests.defaultDeletionMethod.selectRemote": true,
   "githubPullRequests.notifications": "pullRequests",
   "githubPullRequests.terminalLinksHandler": "vscode",
   "gitlens.codeLens.enabled": false,
   "gitlens.menus": {
      "editor": false,
      "editorGroup": false,
      "editorTab": false,
      "explorer": {
         "clipboard": true,
         "compare": true,
         "history": true,
         "remote": true
      },
      "scm": {
         "authors": true
      },
      "scmGroup": {
         "compare": true,
         "openClose": true,
         "stash": true
      },
      "scmGroupInline": {
         "stash": true
      },
      "scmItem": {
         "clipboard": true,
         "compare": true,
         "history": true,
         "remote": false,
         "stash": true
      }
   },
   "gitmoji.additionalEmojis": [
      {
         "description": "Add a new feature                                       [minor]",
         "code": "feat: ",
         "emoji": "✨"
      },
      {
         "description": "Fix a bug                                                      [patch]",
         "code": "fix: ",
         "emoji": "🐛"
      },
      {
         "description": "Fix or patch a non-critical issue                   [patch]",
         "code": "patch: ",
         "emoji": "🩹"
      },
      {
         "description": "Add or Update Tests",
         "code": "test: ",
         "emoji": "🧪"
      },
      {
         "description": "Update documentation",
         "code": "docs: ",
         "emoji": "📝"
      },
      {
         "description": " Update comments or TODO",
         "code": "comments: ",
         "emoji": "💡"
      },
      {
         "description": " Fix compiler / linter warnings",
         "code": "lint: ",
         "emoji": "🚨"
      },
      {
         "description": "Improve performance                                  [patch]",
         "code": "perf: ",
         "emoji": "⚡"
      },
      {
         "description": "Refactor code                                               [patch]",
         "code": "refactor: ",
         "emoji": "♻️"
      },
      {
         "description": "Restyle or improve structure/format",
         "code": "style: ",
         "emoji": "🎨"
      },
      {
         "description": "Fix typo                                                        [patch]",
         "code": "typo: ",
         "emoji": "✏️"
      },
      {
         "description": "Revert Changes                                           [patch]",
         "code": "revert: ",
         "emoji": "⏪"
      },
      {
         "description": " Resolve Security Issue                                 [patch]",
         "code": "security: ",
         "emoji": "🔒"
      },
      {
         "description": "Update the build system",
         "code": "build: ",
         "emoji": "📦"
      },
      {
         "description": " Update the continuous integration",
         "code": "ci: ",
         "emoji": "👷"
      },
      {
         "description": "Release, Deploy, or Publish Project",
         "code": "release: ",
         "emoji": "🚀"
      },
      {
         "description": "Change configuration file(s)                        [patch]",
         "code": "config: ",
         "emoji": "⚙️"
      },
      {
         "description": "Update Dependency                                   [patch]",
         "code": "chore(deps): ",
         "emoji": "🔗"
      },
      {
         "description": "Bump Dependency Version                         [patch]",
         "code": "chore(depbump): ",
         "emoji": "⬆️"
      },
      {
         "description": "Pin Dependency to specific version            [patch]",
         "code": "chore(dep-pin): ",
         "emoji": "📌"
      },
      {
         "description": "Add Dependency                                        [patch]",
         "code": "chore(depadd): ",
         "emoji": "➕"
      },
      {
         "description": "Remove Dependency                                  [patch]",
         "code": "chore(depremove): ",
         "emoji": "➖"
      },
      {
         "description": "Miscellaneous Chore",
         "code": "chore: ",
         "emoji": "🔧"
      },
      {
         "description": "Deprecate or comment out old code         [patch]",
         "code": "deprecate: ",
         "emoji": "🗑️"
      },
      {
         "description": " Remove or delete code/features                [patch]",
         "code": "remove: ",
         "emoji": "🔥"
      },
      {
         "description": "Critical Hotfix                                              [patch]",
         "code": "hotfix: ",
         "emoji": "🚑"
      },
      {
         "description": "BREAKING CHANGE                                    [MAJOR]",
         "code": "BREAKING CHANGE: ",
         "emoji": "💥"
      }
   ],
   "gitmoji.onlyUseAdditionalEmojis": true,
   "hediet.vscode-drawio.codeLinkActivated": true

}